import SwiftUI

struct SignupView: View {
    @Environment(\.dismiss) private var dismiss
    @StateObject private var signUpModel = SignUpModel()
    @StateObject private var userGoalViewModel = UserGoalViewModel()
    
    // Colors for the vibrant theme (matching LoginView)
    let darkBackground = Color.black
    let gradientStart = Color(red: 0.0, green: 0.8, blue: 0.8) // Teal
    let gradientEnd = Color(red: 0.5, green: 0.0, blue: 0.8) // Purple
    let accentColor = Color(red: 0.2, green: 0.8, blue: 0.4) // Green
    let secondaryColor = Color(red: 0.15, green: 0.15, blue: 0.2) // Dark blue-gray
    
    // Avatar color options
    let avatarColors = [Color.blue, Color.green, Color.orange, Color.purple, Color.pink]
    
    var body: some View {
        ZStack {
            // Animated gradient background (matching LoginView)
            LinearGradient(gradient: Gradient(colors: [darkBackground.opacity(0.9), darkBackground]), startPoint: .top, endPoint: .bottom)
                .ignoresSafeArea()
            
            // Subtle animated background elements
            ZStack {
                ForEach(0..<3) { i in
                    Image(systemName: "figure.strengthtraining.traditional")
                        .font(.system(size: CGFloat.random(in: 40...60)))
                        .foregroundColor(Color.white.opacity(0.03))
                        .position(x: CGFloat.random(in: 50...350), 
                                  y: CGFloat.random(in: 100...700))
                        .rotationEffect(.degrees(Double.random(in: 0...360)))
                }
            }
            
            ScrollView {
                VStack(spacing: 25) {
                    // Header with modern styling
                    VStack(spacing: 10) {
                        Text("Create Account")
                            .font(.system(size: 28, weight: .bold))
                            .foregroundStyle(
                                LinearGradient(
                                    colors: [gradientStart, gradientEnd], 
                                    startPoint: .leading, 
                                    endPoint: .trailing
                                )
                            )
                        
                        Text(signUpModel.currentStep == 1 ? "Step 1: Account Info" : "Step 2: Personal Info")
                            .font(.subheadline)
                            .foregroundColor(.gray)
                    }
                    .padding(.bottom, 10)
                    
                    // Progress indicator
                    HStack(spacing: 15) {
                        Circle()
                            .fill(signUpModel.currentStep >= 1 ? accentColor : Color.gray.opacity(0.5))
                            .frame(width: 12, height: 12)
                        
                        Rectangle()
                            .fill(signUpModel.currentStep > 1 ? accentColor : Color.gray.opacity(0.5))
                            .frame(width: 40, height: 2)
                        
                        Circle()
                            .fill(signUpModel.currentStep >= 2 ? accentColor : Color.gray.opacity(0.5))
                            .frame(width: 12, height: 12)
                    }
                    .padding(.bottom, 20)
            
            ScrollView {
                VStack(spacing: 25) {
                    // Header with modern styling
                    VStack(spacing: 10) {
                        Text("Create Account")
                            .font(.system(size: 28, weight: .bold))
                            .foregroundStyle(
                                LinearGradient(
                                    colors: [gradientStart, gradientEnd], 
                                    startPoint: .leading, 
                                    endPoint: .trailing
                                )
                            )
                        
                        Text(signUpModel.currentStep == 1 ? "Step 1: Account Info" : "Step 2: Personal Info")
                            .font(.subheadline)
                            .foregroundColor(.gray)
                    }
                    .padding(.bottom, 10)
                    
                    // Progress indicator
                    HStack(spacing: 15) {
                        Circle()
                            .fill(signUpModel.currentStep >= 1 ? accentColor : Color.gray.opacity(0.5))
                            .frame(width: 12, height: 12)
                        
                        Rectangle()
                            .fill(signUpModel.currentStep > 1 ? accentColor : Color.gray.opacity(0.5))
                            .frame(width: 40, height: 2)
                        
                        Circle()
                            .fill(signUpModel.currentStep >= 2 ? accentColor : Color.gray.opacity(0.5))
                            .frame(width: 12, height: 12)
                    }
                    .padding(.bottom, 20)
                            .font(.custom("Montserrat-Bold", size: 28, relativeTo: .title))
                            .fontWeight(.black)
                            .foregroundStyle(
                                LinearGradient(
                                    colors: [gradientStart, gradientEnd], 
                                    startPoint: .leading, 
                                    endPoint: .trailing
                                )
                            )
                        
                        Text("Build Your Best Back!")
                            .font(.system(size: 16, weight: .medium))
                            .foregroundColor(accentColor)
                    }
                    .padding(.top, 20)
                    
                    // Avatar selection
                    VStack(spacing: 10) {
                        Circle()
                            .fill(avatarColors[selectedAvatarColor])
                            .frame(width: 80, height: 80)
                            .overlay(
                                Image(systemName: "person.fill")
                                    .font(.system(size: 40))
                                    .foregroundColor(.white)
                            )
                            .shadow(color: avatarColors[selectedAvatarColor].opacity(0.5), radius: 5)
                        
                        // Color picker
                        HStack(spacing: 12) {
                            ForEach(0..<avatarColors.count, id: \.self) { index in
                                Circle()
                                    .fill(avatarColors[index])
                                    .frame(width: 24, height: 24)
                                    .overlay(
                                        Circle()
                                            .stroke(selectedAvatarColor == index ? Color.white : Color.clear, lineWidth: 2)
                                    )
                                    .onTapGesture {
                                        selectedAvatarColor = index
                                    }
                            }
                        }
                        .padding(.bottom, 10)
                    }
                
                    // Signup Form with modern styling
                    VStack(spacing: 15) {
                        // Username field
                        HStack {
                            Image(systemName: "person.fill")
                                .foregroundColor(accentColor)
                                .padding(.leading, 10)
                            
                            TextField("", text: $username)
                                .placeholder(when: username.isEmpty) {
                                    Text("Create Username").foregroundColor(.gray.opacity(0.7))
                                }
                                .padding(.vertical, 12)
                                .foregroundColor(.white)
                                .autocapitalization(.none)
                                .disableAutocorrection(true)
                        }
                        .background(secondaryColor)
                        .cornerRadius(12)
                        .overlay(
                            RoundedRectangle(cornerRadius: 12)
                                .stroke(LinearGradient(gradient: Gradient(colors: [gradientStart, gradientEnd]), startPoint: .leading, endPoint: .trailing), lineWidth: 1)
                        )
                        
                        // Email field
                        HStack {
                            Image(systemName: "envelope.fill")
                                .foregroundColor(accentColor)
                                .padding(.leading, 10)
                            
                            TextField("", text: $email)
                                .placeholder(when: email.isEmpty) {
                                    Text("Email").foregroundColor(.gray.opacity(0.7))
                                }
                                .padding(.vertical, 12)
                                .foregroundColor(.white)
                                .autocapitalization(.none)
                                .disableAutocorrection(true)
                                .keyboardType(.emailAddress)
                                .textContentType(.emailAddress)
                        }
                        .background(secondaryColor)
                        .cornerRadius(12)
                        .overlay(
                            RoundedRectangle(cornerRadius: 12)
                                .stroke(LinearGradient(gradient: Gradient(colors: [gradientStart, gradientEnd]), startPoint: .leading, endPoint: .trailing), lineWidth: 1)
                        )
                        
                        // Password field with show/hide
                        HStack {
                            Image(systemName: "lock.fill")
                                .foregroundColor(accentColor)
                                .padding(.leading, 10)
                            
                            if showPassword {
                                TextField("", text: $password)
                                    .placeholder(when: password.isEmpty) {
                                        Text("Password").foregroundColor(.gray.opacity(0.7))
                                    }
                                    .padding(.vertical, 12)
                                    .foregroundColor(.white)
                                    .textContentType(.newPassword)
                            } else {
                                SecureField("", text: $password)
                                    .placeholder(when: password.isEmpty) {
                                        Text("Password").foregroundColor(.gray.opacity(0.7))
                                    }
                                    .padding(.vertical, 12)
                                    .foregroundColor(.white)
                                    .textContentType(.newPassword)
                            }
                            
                            Button(action: {
                                showPassword.toggle()
                            }) {
                                Image(systemName: showPassword ? "eye.slash.fill" : "eye.fill")
                                    .foregroundColor(.gray)
                            }
                            .padding(.trailing, 10)
                        }
                        .background(secondaryColor)
                        .cornerRadius(12)
                        .overlay(
                            RoundedRectangle(cornerRadius: 12)
                                .stroke(LinearGradient(gradient: Gradient(colors: [gradientStart, gradientEnd]), startPoint: .leading, endPoint: .trailing), lineWidth: 1)
                        )
                        
                        // Confirm Password field with show/hide
                        HStack {
                            Image(systemName: "lock.shield.fill")
                                .foregroundColor(accentColor)
                                .padding(.leading, 10)
                            
                            if showConfirmPassword {
                                TextField("", text: $confirmPassword)
                                    .placeholder(when: confirmPassword.isEmpty) {
                                        Text("Confirm Password").foregroundColor(.gray.opacity(0.7))
                                    }
                                    .padding(.vertical, 12)
                                    .foregroundColor(.white)
                            } else {
                                SecureField("", text: $confirmPassword)
                                    .placeholder(when: confirmPassword.isEmpty) {
                                        Text("Confirm Password").foregroundColor(.gray.opacity(0.7))
                                    }
                                    .padding(.vertical, 12)
                                    .foregroundColor(.white)
                            }
                            
                            Button(action: {
                                showConfirmPassword.toggle()
                            }) {
                                Image(systemName: showConfirmPassword ? "eye.slash.fill" : "eye.fill")
                                    .foregroundColor(.gray)
                            }
                            .padding(.trailing, 10)
                        }
                        .background(secondaryColor)
                        .cornerRadius(12)
                        .overlay(
                            RoundedRectangle(cornerRadius: 12)
                                .stroke(LinearGradient(gradient: Gradient(colors: [gradientStart, gradientEnd]), startPoint: .leading, endPoint: .trailing), lineWidth: 1)
                        )
                    
                        // Terms & Privacy
                        HStack(alignment: .top, spacing: 10) {
                            Button(action: {
                                termsAccepted.toggle()
                            }) {
                                Image(systemName: termsAccepted ? "checkmark.square.fill" : "square")
                                    .foregroundColor(termsAccepted ? accentColor : .gray)
                            }
                            
                            Text("I agree to the Terms of Service and Privacy Policy")
                                .font(.caption)
                                .foregroundColor(.gray)
                                .fixedSize(horizontal: false, vertical: true)
                        }
                        .padding(.top, 5)
                        
                        if showError {
                            Text(errorMessage.isEmpty ? "Please check your information and try again." : errorMessage)
                                .foregroundColor(Color.red.opacity(0.8))
                                .font(.system(size: 14, weight: .medium))
                                .padding(.top, 5)
                        }
                        
                        // Sign up button with animation
                        Button(action: {
                            // Validate form
                            if username.isEmpty || email.isEmpty || password.isEmpty || confirmPassword.isEmpty {
                                errorMessage = "All fields are required"
                                showError = true
                                return
                            }
                            
                            if password != confirmPassword {
                                errorMessage = "Passwords don't match"
                                showError = true
                                return
                            }
                            
                            if !termsAccepted {
                                errorMessage = "Please accept the terms"
                                showError = true
                                return
                            }
                            
                            // For MVP, just navigate to main view without authentication
                            withAnimation {
                                animateButton = true
                                
                                // Delay to allow animation to complete
                                DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                                    showingMainView = true
                                }
                            }
                        }) {
                            Text("Create Account")
                                .font(.headline)
                                .fontWeight(.bold)
                                .foregroundColor(.white)
                                .frame(maxWidth: .infinity)
                                .padding()
                                .background(
                                    LinearGradient(gradient: Gradient(colors: [accentColor, accentColor.opacity(0.8)]), startPoint: .leading, endPoint: .trailing)
                                )
                                .cornerRadius(15)
                                .shadow(color: accentColor.opacity(0.5), radius: 5, x: 0, y: 3)
                                .scaleEffect(animateButton ? 0.95 : 1.0)
                        }
                        .padding(.top, 10)
                        .disabled(!termsAccepted)
                        .opacity(termsAccepted ? 1.0 : 0.7)
                    }
                    .padding(.horizontal, 30)
                
                    // Social signup options
                    VStack(spacing: 15) {
                        Text("Or sign up with")
                            .font(.caption)
                            .foregroundColor(.gray)
                        
                        HStack(spacing: 25) {
                            Button(action: {
                                // For MVP, just navigate to main view
                                showingMainView = true
                            }) {
                                Image(systemName: "apple.logo")
                                    .font(.title2)
                                    .foregroundColor(.white)
                                    .frame(width: 44, height: 44)
                                    .background(Color.white.opacity(0.1))
                                    .clipShape(Circle())
                            }
                            
                            Button(action: {
                                // For MVP, just navigate to main view
                                showingMainView = true
                            }) {
                                Image(systemName: "g.circle.fill")
                                    .font(.title2)
                                    .foregroundColor(.white)
                                    .frame(width: 44, height: 44)
                                    .background(Color.white.opacity(0.1))
                                    .clipShape(Circle())
                            }
                        }
                    }
                    .padding(.top, 10)
                    
                    // Add some bottom padding
                    Spacer()
                        .frame(height: 30)
                }
                .padding(.vertical, 20)
            }
        }
        .fullScreenCover(isPresented: $showingMainView) {
            // This will be replaced with your main app view
            MainTabView()
        }
        .preferredColorScheme(.dark)
        .onChange(of: animateButton) { newValue in
            // Reset button animation after delay
            if newValue {
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                    animateButton = false
                }
            }
        }
    }
    
    private func validateAndSignup() {
        // Reset error state
        showError = false
        errorMessage = ""
        
        // Basic validation for MVP
        if username.isEmpty || email.isEmpty || password.isEmpty || confirmPassword.isEmpty {
            errorMessage = "ALL FIELDS REQUIRED. DON'T BE LAZY!"
            showError = true
            return
        }
        
        if password != confirmPassword {
            errorMessage = "PASSWORDS DON'T MATCH. FOCUS HARDER!"
            showError = true
            return
        }
        
        if !email.contains("@") || !email.contains(".") {
            errorMessage = "INVALID EMAIL. GET IT RIGHT!"
            showError = true
            return
        }
        
        if password.count < 6 {
            errorMessage = "PASSWORD TOO WEAK. LIKE YOUR EXCUSES!"
            showError = true
            return
        }
        
        // For MVP, just navigate to main view without actual signup
        showingMainView = true
    }
}

// Preview
#Preview {
    SignupView()
}
